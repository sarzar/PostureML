[{"/Users/sarimzia/Desktop/HTN Project/src/index.js":"1","/Users/sarimzia/Desktop/HTN Project/src/App.js":"2","/Users/sarimzia/Desktop/HTN Project/src/components/Webcam_app.js":"3","/Users/sarimzia/Desktop/HTN Project/src/components/Navbar.js":"4","/Users/sarimzia/Desktop/HTN Project/src/components/Information.js":"5","/Users/sarimzia/Desktop/HTN Project/src/components/LineChart.js":"6"},{"size":237,"mtime":1610930620581,"results":"7","hashOfConfig":"8"},{"size":855,"mtime":1610930833369,"results":"9","hashOfConfig":"8"},{"size":7273,"mtime":1610885653741,"results":"10","hashOfConfig":"8"},{"size":666,"mtime":1610886015183,"results":"11","hashOfConfig":"8"},{"size":1069,"mtime":1610928548614,"results":"12","hashOfConfig":"8"},{"size":1402,"mtime":1610880910762,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v0to30",{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"/Users/sarimzia/Desktop/HTN Project/src/index.js",[],"/Users/sarimzia/Desktop/HTN Project/src/App.js",["30","31"],"/Users/sarimzia/Desktop/HTN Project/src/components/Webcam_app.js",["32","33","34","35","36","37","38","39","40","41","42","43","44"],"import React, { useState } from \"react\";\r\nimport Webcam from 'react-webcam'\r\nimport Button from '@material-ui/core/Button';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { light } from \"@material-ui/core/styles/createPalette\";\r\nimport Grow from '@material-ui/core/Grow';\r\nimport './Webcam_app.css';\r\nimport LineChart from \"./LineChart\";\r\n\r\nvar apiurl= 'https://bikinibottom.cognitiveservices.azure.com/customvision/v3.0/Prediction/6d6530cc-1cd7-49da-aa4c-75153bea8702/detect/iterations/Iteration4/image'\r\n\r\nconst videoConstraints = {\r\n    width: 720,\r\n    height: 480,\r\n    aspectRatio: 1\r\n};\r\n\r\nasync function postData(url = '', data = {}) {\r\n  // Default options are marked with *\r\n  const response = await fetch(url, {\r\n    method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n    mode: 'cors', // no-cors, *cors, same-origin\r\n    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n    credentials: 'same-origin', // include, *same-origin, omit\r\n    headers: {\r\n      'Content-Type': 'application/octet-stream',\r\n     \"Prediction-Key\":'a3f4332e17394dffaf66e787ff2a4a70'\r\n     \r\n    },\r\n    redirect: 'follow', // manual, *follow, error\r\n    referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n    body: data\r\n  });\r\n  return response.json(); // parses JSON response into native JavaScript objects\r\n}\r\n\r\n\r\nfunction Webcam_app() {\r\n    const webcamRef = React.useRef(null);\r\n    const imgRef = React.useRef(null);\r\n    const [imgSrc, setImgSrc] = React.useState(null);\r\n    const [timerRef, setTimerRef] = React.useState(null);\r\n\r\n    const [posture, setPosture] = useState({\r\n      Session: \"stop\",\r\n      PostureState: \"good\",\r\n      Err_msg: \"Neck Tilt\",\r\n      HeadTilt: 0,\r\n      Hunching: 0,\r\n      Reclined: 0,\r\n      ArmRest: 0\r\n  })\r\n  // const [userSettings, setUserSettings] = useState({\r\n  //     Text_to_speech: false,\r\n  //     AlarmSound: \"alarm\",\r\n  //     ColourTheme: light,\r\n  //     IntervalTimer: 1000\r\n  // })\r\n\r\n  /////////////////////////////////////////////////////////////////////////////////////  Functions /////////////////////////////////////////////////////////////////\r\n  const capture = React.useCallback(() => {\r\n    if (webcamRef.current) {\r\n        const imageSrc = webcamRef.current.getScreenshot();\r\n        setImgSrc(imageSrc);\r\n    }\r\n}, [webcamRef, setImgSrc]);\r\n\r\nfunction dataURLtoFile(dataurl, filename) {\r\n    var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\r\n    bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\r\n    while(n--){\r\n    u8arr[n] = bstr.charCodeAt(n);\r\n    }\r\n  return new File([u8arr], filename, {type:mime});\r\n  }\r\n\r\n  function changeSession() {\r\n    setPosture(prevPosture => {\r\n      if (timerRef===null){\r\n       let timer =  setInterval(function() {\r\n\r\n        capture();\r\n       }, 7000); //should be 1 minute for final product, no user settings\r\n       setTimerRef(timer)\r\n      }\r\n      else{\r\n         clearInterval(timerRef);\r\n         setTimerRef(null);\r\n      }\r\n        return {\r\n            Session: (posture.Session == \"Start\") ? \"Stop\" : \"Start\",\r\n            PostureState: prevPosture.PostureState,\r\n            Err_msg: prevPosture.Err_msg,\r\n            HeadTilt: prevPosture.HeadTilt,\r\n            Hunching: prevPosture.Hunching,\r\n            Reclined: prevPosture.Reclined,\r\n            ArmRest: prevPosture.ArmRest\r\n        };\r\n    });\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nReact.useEffect(() => {\r\n      if (imgRef.current ) { \r\nvar fileData = dataURLtoFile(imgSrc, \"imageName.jpg\");\r\n\r\npostData(apiurl, fileData)\r\n.then(data => {\r\nconsole.log(data.predictions[0].tagName); // JSON data parsed by `data.json()` call\r\nif (posture.PostureState==\"good\" && data.predictions[0].tagName!=\"Good Posture\"){\r\n  switch(data.predictions[0].tagName) {\r\n    case \"Head Tilt\":\r\n      localStorage.setItem('Headtilt', posture.HeadTilt + 1 );\r\n      break;\r\n    case \"Hunching\":\r\n      localStorage.setItem('Hunching', posture.Hunching + 1 );\r\n      break;\r\n      case \"Reclining Back\":\r\n        localStorage.setItem('Reclined', posture.Reclined + 1 );\r\n      break;\r\n      case \"Resting Head on Hand\":\r\n        localStorage.setItem('Armrest', posture.ArmRest + 1 );\r\n      break;\r\n    default:\r\n      \r\n  } \r\n \r\n  setPosture(prevPosture => {\r\n          return {\r\n            Session: prevPosture.Session,\r\n            PostureState: \"bad\", //change to bad state\r\n            Err_msg: data.predictions[0].tagName, //state the issue\r\n            HeadTilt:(data.predictions[0].tagName==\"Head Tilt\") ? prevPosture.HeadTilt + 1: prevPosture.HeadTilt,\r\n            Hunching:(data.predictions[0].tagName==\"Hunching\") ? prevPosture.Hunching + 1: prevPosture.Hunching,\r\n            Reclined:(data.predictions[0].tagName==\"Reclining Back\") ? prevPosture.Reclined + 1: prevPosture.Reclined,\r\n            ArmRest:(data.predictions[0].tagName==\"Resting Head on Hand\") ? prevPosture.ArmRest + 1: prevPosture.ArmRest\r\n          };\r\n           });\r\n           \r\n  \r\n  var msg = new SpeechSynthesisUtterance();\r\n  msg.text = \"Please fix your posture\";\r\n  window.speechSynthesis.speak(msg);\r\n\r\n\r\n\r\n  setTimeout(()=>{\r\n    capture()\r\n  }, 2000);\r\n}\r\nelse if (posture.PostureState==\"bad\" && data.predictions[0].tagName==\"Good Posture\"){\r\n\r\n  setPosture(prevPosture => {\r\n          return {\r\n                Session: prevPosture.Session,\r\n                PostureState: \"good\",\r\n                Err_msg:prevPosture.Err_msg,\r\n                HeadTilt:prevPosture.HeadTilt,\r\n                Hunching: prevPosture.Hunching,\r\n                Reclined: prevPosture.Reclined,\r\n                ArmRest: prevPosture.ArmRest\r\n              };\r\n               });\r\n}\r\n// else if (posture.PostureState==\"bad\" && data.predictions[0].tagName!=\"Good Posture\"){ //remain bad\r\n//   // setTimeout(()=>{\r\n//   //   capture()\r\n//   // }, 8000);\r\n// }\r\n\r\n\r\n\r\n\r\n});     \r\n\r\n}\r\n}, [imgSrc])\r\n\r\n\r\n    return (\r\n    <div >\r\n        <Grow in = {posture.PostureState === \"bad\"} >\r\n        <Alert variant = \"filled\"\r\n        severity = \"error\"\r\n        className = \"alert\"> \r\n        { \"Warning! Following bad posture detected: \" + posture.Err_msg + \". Please fix immediately :)\" } \r\n        </Alert> \r\n        </Grow>\r\n        <Webcam videoConstraints = {videoConstraints}\r\n        audio = {false}\r\n        ref = {webcamRef}\r\n        screenshotFormat = \"image/jpeg\"/>\r\n        <div />\r\n        <Button variant = \"contained\"\r\n        color = \"primary\"\r\n        onClick = { changeSession } > {\r\n            (posture.Session == \"Start\") ? \"Stop\" : \"Start\"\r\n        } </Button>\r\n        <div />\r\n        <h3> Below is a breakdown of your posture during this session: </h3>\r\n        <LineChart  \r\n        HeadOH={posture.ArmRest}\r\n        headTilt={posture.HeadTilt}\r\n        back={posture.Reclined}S\r\n        hunching={posture.Hunching}\r\n        />\r\n        {\r\n            imgSrc &&\r\n            <img id=\"image\" className=\"detect\" ref={imgRef} src={imgSrc} />\r\n        }\r\n        </div >\r\n    )\r\n\r\n}\r\nexport default Webcam_app;",["45","46"],"/Users/sarimzia/Desktop/HTN Project/src/components/Navbar.js",[],"/Users/sarimzia/Desktop/HTN Project/src/components/Information.js",["47","48","49","50"],"import React, { Component } from 'react';\nimport './Information.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\n\n\nexport class Information extends Component {\n  render() {\n    return (\n    <div >\n      <h1 className=\"logo_login\" > Posture <span className = \"p\"> ML</span> </h1>\n\n\n            <p className=\"flex-box-home\" >\n          PostureML allows you to monitor your posture through real time video posture analysis. < br /> Get notified on your posture today. \n          </p>\n             <div className = \"image\">\n               \n               </div> \n                   \n                    <img src=\"https://i.pinimg.com/originals/e4/26/70/e426702edf874b181aced1e2fa5c6cde.gif\"/>\n                    <p className=\"flex-box-home\"> In times of pandemic, and work from home situation, this is a must have tool. </p>\n                    <p className = \"helo\"> Powered by Azure</p>\n            </div>\n  \n        );\n    }\n}\n\n\nexport default Information;","/Users/sarimzia/Desktop/HTN Project/src/components/LineChart.js",["51","52"],"import { Chart } from 'react-google-charts';\r\n\r\nimport React, { useState, Component, } from 'react';\r\n// data={[\r\n//   ['', 'Number of Posture Hits'],\r\n//   ['Head Tilt', localStorage.getItem('Headtilt') || 0 ],\r\n//   ['Resting head on arms',localStorage.getItem('Armrest') || 0],\r\n//   ['Reclined', localStorage.getItem('Reclining Back') || 0],\r\n//   ['Hunching',localStorage.getItem('Hunching')|| 0],\r\n// ]}\r\n\r\nfunction LineChart(props) {\r\n\r\n    console.log(props)\r\nreturn (\r\n    <div style={{marginTop:200}}>\r\n    <Chart\r\n    width={1920}\r\n    height={1080}\r\n    chartType=\"ColumnChart\"\r\n    loader={<p>Loading Chart</p>}\r\n    data={[\r\n      ['', 'Number of Posture Hits'],\r\n      ['Head Tilt', props.headTilt],\r\n      ['Resting head on arms', props.HeadOH ],\r\n      ['Reclined', props.back],\r\n      ['Hunching',props.hunching],\r\n    ]}\r\n    options={{\r\n      title: 'Your personal posture analyzed',\r\n      titleTextStyle: { color: '#FFF'},\r\n      chartArea: { width: '30%' },\r\n      backgroundColor: 'transparent',\r\n      hAxis: {\r\n        title: '# of Warnings',\r\n        color: '#00FFFF',\r\n        minValue: 0,\r\n        textStyle:{color: '#FFF'},\r\n      },\r\n      vAxis: {\r\n        title: 'Poor Posture State',\r\n        textStyle:{color: '#FFF'},\r\n      },\r\n      legend: {textStyle: {color: '#FFF'}}\r\n    }}\r\n    legendToggle\r\n  />\r\n  </ div>\r\n\r\n        );\r\n    }\r\n\r\n\r\nexport default LineChart;",{"ruleId":"53","severity":1,"message":"54","line":5,"column":10,"nodeType":"55","messageId":"56","endLine":5,"endColumn":20},{"ruleId":"53","severity":1,"message":"57","line":12,"column":8,"nodeType":"55","messageId":"56","endLine":12,"endColumn":17},{"ruleId":"53","severity":1,"message":"58","line":5,"column":10,"nodeType":"55","messageId":"56","endLine":5,"endColumn":15},{"ruleId":"59","severity":1,"message":"60","line":91,"column":39,"nodeType":"61","messageId":"62","endLine":91,"endColumn":41},{"ruleId":"59","severity":1,"message":"60","line":110,"column":25,"nodeType":"61","messageId":"62","endLine":110,"endColumn":27},{"ruleId":"59","severity":1,"message":"63","line":110,"column":64,"nodeType":"61","messageId":"62","endLine":110,"endColumn":66},{"ruleId":"59","severity":1,"message":"60","line":133,"column":50,"nodeType":"61","messageId":"62","endLine":133,"endColumn":52},{"ruleId":"59","severity":1,"message":"60","line":134,"column":50,"nodeType":"61","messageId":"62","endLine":134,"endColumn":52},{"ruleId":"59","severity":1,"message":"60","line":135,"column":50,"nodeType":"61","messageId":"62","endLine":135,"endColumn":52},{"ruleId":"59","severity":1,"message":"60","line":136,"column":49,"nodeType":"61","messageId":"62","endLine":136,"endColumn":51},{"ruleId":"59","severity":1,"message":"60","line":151,"column":30,"nodeType":"61","messageId":"62","endLine":151,"endColumn":32},{"ruleId":"59","severity":1,"message":"60","line":151,"column":68,"nodeType":"61","messageId":"62","endLine":151,"endColumn":70},{"ruleId":"64","severity":1,"message":"65","line":177,"column":4,"nodeType":"66","endLine":177,"endColumn":12,"suggestions":"67"},{"ruleId":"59","severity":1,"message":"60","line":197,"column":30,"nodeType":"61","messageId":"62","endLine":197,"endColumn":32},{"ruleId":"68","severity":1,"message":"69","line":209,"column":13,"nodeType":"70","endLine":209,"endColumn":76},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"53","severity":1,"message":"75","line":3,"column":10,"nodeType":"55","messageId":"56","endLine":3,"endColumn":20},{"ruleId":"53","severity":1,"message":"76","line":4,"column":8,"nodeType":"55","messageId":"56","endLine":4,"endColumn":17},{"ruleId":"53","severity":1,"message":"77","line":5,"column":8,"nodeType":"55","messageId":"56","endLine":5,"endColumn":14},{"ruleId":"68","severity":1,"message":"69","line":23,"column":21,"nodeType":"70","endLine":23,"endColumn":110},{"ruleId":"53","severity":1,"message":"78","line":3,"column":17,"nodeType":"55","messageId":"56","endLine":3,"endColumn":25},{"ruleId":"53","severity":1,"message":"79","line":3,"column":27,"nodeType":"55","messageId":"56","endLine":3,"endColumn":36},"no-unused-vars","'GraphModel' is defined but never used.","Identifier","unusedVar","'LineChart' is defined but never used.","'light' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'capture', 'posture.ArmRest', 'posture.HeadTilt', 'posture.Hunching', 'posture.PostureState', and 'posture.Reclined'. Either include them or remove the dependency array.","ArrayExpression",["80"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["81"],"no-negated-in-lhs",["82"],"'makeStyles' is defined but never used.","'TextField' is defined but never used.","'Button' is defined but never used.","'useState' is defined but never used.","'Component' is defined but never used.",{"desc":"83","fix":"84"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [capture, imgSrc, posture.ArmRest, posture.HeadTilt, posture.Hunching, posture.PostureState, posture.Reclined]",{"range":"85","text":"86"},[6135,6143],"[capture, imgSrc, posture.ArmRest, posture.HeadTilt, posture.Hunching, posture.PostureState, posture.Reclined]"]